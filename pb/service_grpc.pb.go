// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	WallCollage_Start_FullMethodName              = "/pb.WallCollage/Start"
	WallCollage_Stop_FullMethodName               = "/pb.WallCollage/Stop"
	WallCollage_Random_FullMethodName             = "/pb.WallCollage/Random"
	WallCollage_SolidColor_FullMethodName         = "/pb.WallCollage/SolidColor"
	WallCollage_Status_FullMethodName             = "/pb.WallCollage/Status"
	WallCollage_SetDelay_FullMethodName           = "/pb.WallCollage/SetDelay"
	WallCollage_SetBackgroundColor_FullMethodName = "/pb.WallCollage/SetBackgroundColor"
	WallCollage_ToggleCollage_FullMethodName      = "/pb.WallCollage/ToggleCollage"
	WallCollage_ListFolders_FullMethodName        = "/pb.WallCollage/ListFolders"
	WallCollage_AddFolder_FullMethodName          = "/pb.WallCollage/AddFolder"
	WallCollage_RemoveFolder_FullMethodName       = "/pb.WallCollage/RemoveFolder"
)

// WallCollageClient is the client API for WallCollage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WallCollageClient interface {
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	Random(ctx context.Context, in *RandomRequest, opts ...grpc.CallOption) (*RandomResponse, error)
	SolidColor(ctx context.Context, in *SolidColorRequest, opts ...grpc.CallOption) (*SolidColorResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	SetDelay(ctx context.Context, in *SetDelayRequest, opts ...grpc.CallOption) (*SetDelayResponse, error)
	SetBackgroundColor(ctx context.Context, in *SetBackgroundColorRequest, opts ...grpc.CallOption) (*SetBackgroundColorResponse, error)
	ToggleCollage(ctx context.Context, in *ToggleCollageRequest, opts ...grpc.CallOption) (*ToggleCollageResponse, error)
	ListFolders(ctx context.Context, in *ListFoldersRequest, opts ...grpc.CallOption) (*ListFoldersResponse, error)
	AddFolder(ctx context.Context, in *AddFolderRequest, opts ...grpc.CallOption) (*AddFolderResponse, error)
	RemoveFolder(ctx context.Context, in *RemoveFolderRequest, opts ...grpc.CallOption) (*RemoveFolderResponse, error)
}

type wallCollageClient struct {
	cc grpc.ClientConnInterface
}

func NewWallCollageClient(cc grpc.ClientConnInterface) WallCollageClient {
	return &wallCollageClient{cc}
}

func (c *wallCollageClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, WallCollage_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wallCollageClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, WallCollage_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wallCollageClient) Random(ctx context.Context, in *RandomRequest, opts ...grpc.CallOption) (*RandomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RandomResponse)
	err := c.cc.Invoke(ctx, WallCollage_Random_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wallCollageClient) SolidColor(ctx context.Context, in *SolidColorRequest, opts ...grpc.CallOption) (*SolidColorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SolidColorResponse)
	err := c.cc.Invoke(ctx, WallCollage_SolidColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wallCollageClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, WallCollage_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wallCollageClient) SetDelay(ctx context.Context, in *SetDelayRequest, opts ...grpc.CallOption) (*SetDelayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDelayResponse)
	err := c.cc.Invoke(ctx, WallCollage_SetDelay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wallCollageClient) SetBackgroundColor(ctx context.Context, in *SetBackgroundColorRequest, opts ...grpc.CallOption) (*SetBackgroundColorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetBackgroundColorResponse)
	err := c.cc.Invoke(ctx, WallCollage_SetBackgroundColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wallCollageClient) ToggleCollage(ctx context.Context, in *ToggleCollageRequest, opts ...grpc.CallOption) (*ToggleCollageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToggleCollageResponse)
	err := c.cc.Invoke(ctx, WallCollage_ToggleCollage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wallCollageClient) ListFolders(ctx context.Context, in *ListFoldersRequest, opts ...grpc.CallOption) (*ListFoldersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFoldersResponse)
	err := c.cc.Invoke(ctx, WallCollage_ListFolders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wallCollageClient) AddFolder(ctx context.Context, in *AddFolderRequest, opts ...grpc.CallOption) (*AddFolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddFolderResponse)
	err := c.cc.Invoke(ctx, WallCollage_AddFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wallCollageClient) RemoveFolder(ctx context.Context, in *RemoveFolderRequest, opts ...grpc.CallOption) (*RemoveFolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFolderResponse)
	err := c.cc.Invoke(ctx, WallCollage_RemoveFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WallCollageServer is the server API for WallCollage service.
// All implementations must embed UnimplementedWallCollageServer
// for forward compatibility
type WallCollageServer interface {
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	Random(context.Context, *RandomRequest) (*RandomResponse, error)
	SolidColor(context.Context, *SolidColorRequest) (*SolidColorResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	SetDelay(context.Context, *SetDelayRequest) (*SetDelayResponse, error)
	SetBackgroundColor(context.Context, *SetBackgroundColorRequest) (*SetBackgroundColorResponse, error)
	ToggleCollage(context.Context, *ToggleCollageRequest) (*ToggleCollageResponse, error)
	ListFolders(context.Context, *ListFoldersRequest) (*ListFoldersResponse, error)
	AddFolder(context.Context, *AddFolderRequest) (*AddFolderResponse, error)
	RemoveFolder(context.Context, *RemoveFolderRequest) (*RemoveFolderResponse, error)
	mustEmbedUnimplementedWallCollageServer()
}

// UnimplementedWallCollageServer must be embedded to have forward compatible implementations.
type UnimplementedWallCollageServer struct {
}

func (UnimplementedWallCollageServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedWallCollageServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedWallCollageServer) Random(context.Context, *RandomRequest) (*RandomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Random not implemented")
}
func (UnimplementedWallCollageServer) SolidColor(context.Context, *SolidColorRequest) (*SolidColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolidColor not implemented")
}
func (UnimplementedWallCollageServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedWallCollageServer) SetDelay(context.Context, *SetDelayRequest) (*SetDelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDelay not implemented")
}
func (UnimplementedWallCollageServer) SetBackgroundColor(context.Context, *SetBackgroundColorRequest) (*SetBackgroundColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBackgroundColor not implemented")
}
func (UnimplementedWallCollageServer) ToggleCollage(context.Context, *ToggleCollageRequest) (*ToggleCollageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleCollage not implemented")
}
func (UnimplementedWallCollageServer) ListFolders(context.Context, *ListFoldersRequest) (*ListFoldersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFolders not implemented")
}
func (UnimplementedWallCollageServer) AddFolder(context.Context, *AddFolderRequest) (*AddFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFolder not implemented")
}
func (UnimplementedWallCollageServer) RemoveFolder(context.Context, *RemoveFolderRequest) (*RemoveFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFolder not implemented")
}
func (UnimplementedWallCollageServer) mustEmbedUnimplementedWallCollageServer() {}

// UnsafeWallCollageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WallCollageServer will
// result in compilation errors.
type UnsafeWallCollageServer interface {
	mustEmbedUnimplementedWallCollageServer()
}

func RegisterWallCollageServer(s grpc.ServiceRegistrar, srv WallCollageServer) {
	s.RegisterService(&WallCollage_ServiceDesc, srv)
}

func _WallCollage_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WallCollageServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WallCollage_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WallCollageServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WallCollage_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WallCollageServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WallCollage_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WallCollageServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WallCollage_Random_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WallCollageServer).Random(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WallCollage_Random_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WallCollageServer).Random(ctx, req.(*RandomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WallCollage_SolidColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolidColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WallCollageServer).SolidColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WallCollage_SolidColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WallCollageServer).SolidColor(ctx, req.(*SolidColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WallCollage_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WallCollageServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WallCollage_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WallCollageServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WallCollage_SetDelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WallCollageServer).SetDelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WallCollage_SetDelay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WallCollageServer).SetDelay(ctx, req.(*SetDelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WallCollage_SetBackgroundColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBackgroundColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WallCollageServer).SetBackgroundColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WallCollage_SetBackgroundColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WallCollageServer).SetBackgroundColor(ctx, req.(*SetBackgroundColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WallCollage_ToggleCollage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleCollageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WallCollageServer).ToggleCollage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WallCollage_ToggleCollage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WallCollageServer).ToggleCollage(ctx, req.(*ToggleCollageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WallCollage_ListFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFoldersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WallCollageServer).ListFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WallCollage_ListFolders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WallCollageServer).ListFolders(ctx, req.(*ListFoldersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WallCollage_AddFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WallCollageServer).AddFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WallCollage_AddFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WallCollageServer).AddFolder(ctx, req.(*AddFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WallCollage_RemoveFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WallCollageServer).RemoveFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WallCollage_RemoveFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WallCollageServer).RemoveFolder(ctx, req.(*RemoveFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WallCollage_ServiceDesc is the grpc.ServiceDesc for WallCollage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WallCollage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.WallCollage",
	HandlerType: (*WallCollageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _WallCollage_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _WallCollage_Stop_Handler,
		},
		{
			MethodName: "Random",
			Handler:    _WallCollage_Random_Handler,
		},
		{
			MethodName: "SolidColor",
			Handler:    _WallCollage_SolidColor_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _WallCollage_Status_Handler,
		},
		{
			MethodName: "SetDelay",
			Handler:    _WallCollage_SetDelay_Handler,
		},
		{
			MethodName: "SetBackgroundColor",
			Handler:    _WallCollage_SetBackgroundColor_Handler,
		},
		{
			MethodName: "ToggleCollage",
			Handler:    _WallCollage_ToggleCollage_Handler,
		},
		{
			MethodName: "ListFolders",
			Handler:    _WallCollage_ListFolders_Handler,
		},
		{
			MethodName: "AddFolder",
			Handler:    _WallCollage_AddFolder_Handler,
		},
		{
			MethodName: "RemoveFolder",
			Handler:    _WallCollage_RemoveFolder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
